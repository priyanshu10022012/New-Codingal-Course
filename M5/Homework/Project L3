<!DOCTYPE html>
<html>
<body>
<h1>JavaScript Class Static Methods</h1>
<p>A static method is created with the "static" keyword, and you can only call the method on the class itself.</p>

<p id="demo"></p>

<script>
class Car {
  constructor(name) {
    this.name = name;
  }
  static hello() {
    return "Hello!!";
  }
}

const myCar = new Car("Ford");

//You can call 'hello()' on the Car Class:
document.getElementById("demo").innerHTML = Car.hello();

// But NOT on  a Car Object:
// document.getElementById("demo").innerHTML = myCar.hello();
// this will raise an error.
</script>

</body>
</html>

<!DOCTYPE html>
<html>

<body>
    <h1>JavaScript Class Getter/Setter</h1>
    <p>Using an underscore character is common practice when using getters/setters in JavaScript, but not mandatory, you
        can name them anything you like, but not the same as the property name.</p>

    <p id="demo"></p>

    <script>
        class Car {
            constructor(brand) {
                this._carname = brand;
            }
            get carname() {
                return this._carname;
            }
            set carname(x) {
                this._carname = x;
            }
        }

        const myCar = new Car("Ford");

        document.getElementById("demo").innerHTML = myCar.carname;
    </script>

</body>

</html>